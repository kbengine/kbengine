.\" This manpage is Copyright (C) 2016 MongoDB, Inc.
.\" 
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.3
.\" or any later version published by the Free Software Foundation;
.\" with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
.\" A copy of the license is included in the section entitled "GNU
.\" Free Documentation License".
.\" 
.TH "MONGOC_RAND" "3" "2016\(hy01\(hy14" "MongoDB C Driver"
.SH NAME
mongoc_rand \- MongoDB Random Number Generator
.SH "SYNOPSIS"

.nf
.nf
void
mongoc_rand_add (const void *buf,
                 int         num,
                 doubel      entropy);

void
mongoc_rand_seed (const void *buf,
                  int         num);

int
mongoc_rand_status (void);
.fi
.fi

.SH "DESCRIPTION"

The
.B mongoc_rand
family of functions provide access to the low level randomness primitives used by the MongoDB C Driver.  In particular, they control the creation of cryptographically strong pseudo\(hyrandom bytes required by some security mechanisms.

While we can usually pull enough entropy from the environment, you may be required to seed the PRNG manually depending on your OS, hardware and other entropy consumers running on the same system.

.SH "ENTROPY"

.B mongoc_rand_add
and
.B mongoc_rand_seed
allow the user to directly provide entropy.  They differ insofar as
.B mongoc_rand_seed
requires that each bit provided is fully random.
.B mongoc_rand_add
allows the user to specify the degree of randomness in the provided bytes as well.

.SH "STATUS"

The
.B mongoc_rand_status
function allows the user to check the status of the mongoc PRNG.  This can be used to guarantee sufficient entropy at program startup, rather than waiting for runtime errors to occur.


.B
.SH COLOPHON
This page is part of MongoDB C Driver.
Please report any bugs at https://jira.mongodb.org/browse/CDRIVER.