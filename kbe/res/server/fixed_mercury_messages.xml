<root>
	<Machine::onFindInterfaceAddr>
		<id>1</id>
		<descr>寻找组件接口地址。</descr>
	</Machine::onFindInterfaceAddr>

	<Machine::startserver>
		<id>2</id>
		<descr>启动服务器。</descr>
	</Machine::startserver>
	
	<Machine::stopserver>
		<id>3</id>
		<descr>停止服务器。</descr>
	</Machine::stopserver>
	
	<Machine::onQueryAllInterfaceInfos>
		<id>4</id>
		<descr>查询所有接口信息。</descr>
	</Machine::onQueryAllInterfaceInfos>
	
	<Loginapp::reqClose>
		<id>1</id>
		<descr>客户端请求断线。</descr>
	</Loginapp::reqClose>
	
	<Loginapp::reqCreateAccount>
		<id>2</id>
		<descr>客户端请求创建一个账号。</descr>
		<arg>STRING</arg> <!-- 账号名 -->
		<arg>STRING</arg> <!-- 密码 -->
		<arg>UINT8_ARRAY</arg> <!-- 二进制流， 具体由开发者来解析 -->
	</Loginapp::reqCreateAccount>
	
	<Loginapp::login>
		<id>3</id>
		<descr>客户端请求登录到服务器的loginapp进程， 此进程受到请求验证合法后会返回一个网关地址。</descr>
		<arg>STRING</arg> <!-- 前端类别 0:调试前端, 1:手机前端, n.. -->
		<arg>UINT8_ARRAY</arg> <!-- 具体由开发者来解析 -->
		<arg>STRING</arg> <!-- 账号名 -->
		<arg>STRING</arg> <!-- 密码 -->
	</Loginapp::login>
	
	<Loginapp::hello>
		<id>4</id>
		<descr>hello。</descr>
	</Loginapp::hello>

	<Loginapp::importClientMessages>
		<id>5</id>
		<descr>客户端请求导入消息协议。</descr>
	</Loginapp::importClientMessages>
	
	<Loginapp::reqCreateMailAccount>
		<id>6</id>
		<descr>客户端请求创建一个mail账号。</descr>
		<arg>STRING</arg> <!-- 账号名 -->
		<arg>STRING</arg> <!-- 密码 -->
		<arg>UINT8_ARRAY</arg> <!-- 二进制流， 具体由开发者来解析 -->
	</Loginapp::reqCreateMailAccount>
	
	<Baseapp::hello>
		<id>200</id>
		<descr>hello。</descr>
	</Baseapp::hello>
	
	<Baseapp::reqClose>
		<id>201</id>
		<descr>客户端请求断线。</descr>
	</Baseapp::reqClose>
	
	<Baseapp::loginGateway>
		<id>202</id>
		<descr>客户端请求登录到服务器的网关进程， 如果合法则将进入游戏。</descr>
		<arg>STRING</arg> <!-- 账号名 -->
		<arg>STRING</arg> <!-- 密码 -->
	</Baseapp::loginGateway>
	
	<Baseapp::reLoginGateway>
		<id>204</id>
		<descr>重新登录 快速与网关建立交互关系(前提是之前已经登录了， 
			之后断开在服务器判定该前端的Entity未超时销毁的前提下可以快速与服务器建立连接并达到操控该entity的目的)
		</descr>
		<arg>UINT64</arg> <!-- 64位随机GUID码 -->
		<arg>INT32</arg> <!-- ENTITY_ID -->
	</Baseapp::reLoginGateway>
	
	<Baseapp::onRemoteCallCellMethodFromClient>
		<id>205</id>
		<descr>调用一个cell远程方法。</descr>
		<arg>INT32</arg> <!-- entityID -->

		<arg>UINT8_ARRAY</arg> <!-- 方法参数二进制流， 具体由方法来解析 -->
	</Baseapp::onRemoteCallCellMethodFromClient>
	
	<Baseapp::onClientActiveTick>
		<id>206</id>
		<descr>客户端的tick。</descr>
	</Baseapp::onClientActiveTick>
	
	<Baseapp::importClientMessages>
		<id>207</id>
		<descr>客户端请求导入消息协议。</descr>
	</Baseapp::importClientMessages>

	<Baseapp::importClientEntityDef>
		<id>208</id>
		<descr>客户端entitydef导出。</descr>
	</Baseapp::importClientEntityDef>
	
	<Base::onRemoteMethodCall>
		<id>301</id>
		<descr>调用一个base远程方法。</descr>
		<arg>INT32</arg> <!-- entityID -->
		<arg>UINT16</arg> <!-- 方法ID -->
		<arg>UINT8_ARRAY</arg> <!-- 方法参数二进制流， 具体由方法来解析 -->
	</Base::onRemoteMethodCall>
	
	<Entity::onRemoteMethodCall>
		<id>302</id>
		<descr>调用一个cell远程方法。</descr>
		<arg>INT32</arg> <!-- entityID -->
		<arg>UINT16</arg> <!-- 方法ID -->
		<arg>UINT8_ARRAY</arg> <!-- 方法参数二进制流， 具体由方法来解析 -->
	</Entity::onRemoteMethodCall>
	
	<Proxy::onClientGetCell>
		<id>401</id>
		<descr>服务器将cell信息初始化给客户端后， 客户端应该告知服务器这个回调供服务器确定。
		</descr>
	</Proxy::onClientGetCell>
	
	<Client::onCreateAccountResult>
		<id>501</id>
		<descr>创建账号成功和失败回调。</descr>
		<arg>UINT16</arg> <!-- 错误码 MERCURY_ERR_SRV_NO_READY:服务器没有准备好, 
									MERCURY_ERR_ACCOUNT_CREATE:创建失败（已经存在）, 
									MERCURY_SUCCESS:账号创建成功 -->
		<arg>UINT8_ARRAY</arg> <!-- 二进制流， 具体由开发者来解析 -->
	</Client::onCreateAccountResult>
	
	<Client::onLoginSuccessfully>
		<id>502</id>
		<descr>客户端登陆到loginapp，服务器返回成功。</descr>
		<arg>STRING</arg> <!-- 内部账号名称 -->
		<arg>STRING</arg> <!-- 网关ip地址 -->
		<arg>UINT16</arg> <!-- 网关端口 -->
		<arg>UINT8_ARRAY</arg> <!-- 二进制流， 具体由开发者来解析 -->
	</Client::onLoginSuccessfully>
	
	<Client::onLoginFailed>
		<id>503</id>
		<descr>客户端登陆到loginapp，服务器返回失败。</descr>
		<arg>UINT16</arg> <!-- 错误码 MERCURY_ERR_SRV_NO_READY:服务器没有准备好, 
									MERCURY_ERR_SRV_OVERLOAD:服务器负载过重, 
									MERCURY_ERR_NAME_PASSWORD:用户名或者密码不正确 -->
									
		<arg>UINT8_ARRAY</arg> <!-- 二进制流， 具体由开发者来解析 -->
	</Client::onLoginFailed>
	
	<Client::onCreatedProxies>
		<id>504</id>
		<descr>		服务器端已经创建了一个与客户端关联的代理Entity
	   在登录时也可表达成功回调。</descr>
	   <arg>UINT64</arg> <!-- 与entity关联用来短连接身份确认的guid码 -->
	   <arg>INT32</arg> <!-- entityID -->
	   <arg>STRING</arg> <!-- 脚本类型 -->
	</Client::onCreatedProxies>

	<Client::onCreatedEntity>
		<id>513</id>
		<descr>		服务器端已经创建了一个与客户端关联的代理Entity
	   在登录时也可表达成功回调。</descr>
	   <arg>INT32</arg> <!-- entityID -->
	   <arg>STRING</arg> <!-- 脚本类型 -->
	</Client::onCreatedEntity>
	
	<Client::onLoginGatewayFailed>
		<id>505</id>
		<descr>客户端登陆到网关，服务器返回失败。</descr>
		<arg>UINT16</arg> <!-- 错误码 MERCURY_ERR_SRV_NO_READY:服务器没有准备好, 
									MERCURY_ERR_ILLEGAL_LOGIN:非法登录, 
									MERCURY_ERR_NAME_PASSWORD:用户名或者密码不正确 -->
	</Client::onLoginGatewayFailed>
	
	<Client::onRemoteMethodCall>
		<id>506</id>
		<descr>调用一个远程方法。</descr>
		<arg>INT32</arg> <!-- entityID -->
		<arg>UINT16</arg> <!-- 方法ID -->
		<arg>UINT8_ARRAY</arg> <!-- 方法参数二进制流， 具体由方法来解析 -->
	</Client::onRemoteMethodCall>
	
	<Client::onEntityEnterWorld>
		<id>507</id>
		<descr>一个entity进入世界(初次登录时第一个进入世界的是自己这个ENTITY， 其后理论是其他entity， 对比ID来判断)。
			当有entity进入玩家的AOI时则会触发客户端这个接口。 (AOI: area of interest, 也可理解为服务器上可视范围)
		</descr>
		<arg>INT32</arg> <!-- 进入世界的entityID int32 -->
		<arg>UINT32</arg> <!-- spaceID uint32 -->
	</Client::onEntityEnterWorld>
	
	<Client::onEntityLeaveWorld>
		<id>508</id>
		<descr>一个entity进入世界(初次登录时第一个进入世界的是自己这个ENTITY， 其后理论是其他entity， 对比ID来判断)。
			当有entity离开玩家的AOI时则会触发客户端这个接口。
		</descr>
		<arg>INT32</arg> <!-- 进入世界的entityID int32 -->
		<arg>UINT32</arg> <!-- spaceID uint32 -->
	</Client::onEntityLeaveWorld>

	<Client::onEntityEnterSpace>
		<id>509</id>
		<descr>一个entity进入世界(初次登录时第一个进入世界的是自己这个ENTITY， 其后理论是其他entity， 对比ID来判断)。
			当有entity进入玩家的AOI时则会触发客户端这个接口。 (AOI: area of interest, 也可理解为服务器上可视范围)
		</descr>
		<arg>UINT32</arg> <!-- 一个场景的ID uint32-->
		<arg>INT32</arg> <!-- 进入世界的entityID int32 -->
	</Client::onEntityEnterSpace>
	
	<Client::onEntityLeaveSpace>
		<id>510</id>
		<descr>一个entity进入世界(初次登录时第一个进入世界的是自己这个ENTITY， 其后理论是其他entity， 对比ID来判断)。
			当有entity离开玩家的AOI时则会触发客户端这个接口。
		</descr>
		<arg>UINT32</arg> <!-- 一个场景的ID uint32-->
		<arg>INT32</arg> <!-- 进入世界的entityID int32 -->
	</Client::onEntityLeaveSpace>
	
	<Client::onUpdatePropertys>
		<id>511</id>
		<descr>某个entity的属性被更新了。
		</descr>
		<arg>INT32</arg> <!-- entityID int32 -->
		<arg>UINT8_ARRAY</arg> <!-- 属性更新包， 需要解析 -->
	</Client::onUpdatePropertys>
	
	<Client::onEntityDestroyed>
		<id>512</id>
		<descr>告诉客户端某个entity销毁了， 此类entity通常是还未onEntityEnterWorld。</descr>
		<arg>INT32</arg> <!-- entityID int32 -->
	</Client::onEntityDestroyed>
	
	<Client::onStreamDataStarted>
		<id>514</id>
		<descr>服务器告知客户端数据流开始下载。
		</descr>
		<arg>INT16</arg> <!-- 一个下载句柄 INT16 -->
		<arg>STRING</arg> <!-- 描述 -->
	</Client::onStreamDataStarted>
	
	<Client::onStreamDataRecv>
		<id>515</id>
		<descr>客户端接收到数据流。
		</descr>
		<arg>INT16</arg> <!-- 一个下载句柄 INT16 -->
		<arg>UINT32</arg> <!-- 本次接收的数据大小 -->
		<arg>UINT8_ARRAY</arg> <!-- 二进制流 -->
	</Client::onStreamDataRecv>
	
	<Client::onStreamDataCompleted>
		<id>516</id>
		<descr>服务器告知客户端数据流下载完成。
		</descr>
		<arg>INT16</arg> <!-- 一个下载句柄 INT16 -->
	</Client::onStreamDataCompleted>
	
	<Client::onKicked>
		<id>517</id>
		<descr>服务器已经踢出该客户端。
		</descr>
		<arg>UINT16</arg> <!-- 错误码 mercury_errors.xml -->
	</Client::onKicked>

	<Client::onImportClientMessages>
		<id>518</id>
		<descr>服务器返回的协议包。
		</descr>
		<arg>UINT8_ARRAY</arg> <!-- 需要解析 -->
	</Client::onImportClientMessages>

	<Client::onImportClientEntityDef>
		<id>519</id>
		<descr>服务器返回的entitydef数据。
		</descr>
		<arg>UINT8_ARRAY</arg> <!-- 需要解析 -->
	</Client::onImportClientEntityDef>

	<Client::addSpaceGeometryMapping>
		<id>520</id>
		<descr>服务器向客户端添加几何映射。
		</descr>
		<arg>UINT32</arg> <!-- spaceID -->
		<arg>STRING</arg> <!-- respath -->
	</Client::addSpaceGeometryMapping>
	
	<Client::onHelloCB>
		<id>521</id>
		<descr>onHelloCB。</descr>
	</Client::onHelloCB>
	
	<Property::position>
		<id>40000</id>
		<descr>位置属性。</descr>
		<arg>VECTOR3</arg> <!-- float(x) float(y) float(z) -->
	</Property::position>

	<Property::direction>
		<id>40001</id>
		<descr>方向属性。</descr>
		<arg>VECTOR3</arg> <!-- float(roll) float(pitch) float(yaw) -->
	</Property::direction>
	
	<Property::spaceID>
		<id>40002</id>
		<descr>所在空间ID。</descr>
		<arg>SPACE_ID</arg> <!-- uint32 -->
	</Property::spaceID>
</root>